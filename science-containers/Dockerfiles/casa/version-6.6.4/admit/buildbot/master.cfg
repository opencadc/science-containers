# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory (although the filename
# can be changed with the --basedir option to 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .


# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### DB URL

# This specifies what database buildbot uses to store change and scheduler
# state
#c['db_url'] = "sqlite:///state.sqlite?serialize_access=1"
# Use mysq instead:
c['db_url'] = "mysql://buildbotuser:1amaB0t@localhost/buildbot?max_idle=300"

####### BUILDSLAVES

# the 'slaves' list defines the set of allowable buildslaves. Each element is
# a BuildSlave object, which is created with bot-name, bot-password.  These
# correspond to values given to the buildslave's mktap invocation.
from buildbot.buildslave import BuildSlave
# this is how you can set static properties on a buildslave
props = { 'testprop': 'testvalue' }

# FOR ADMIT
admitname = 'ADMIT'
admitgit  = 'ADMIT-git-incremental'
admitgitrepo = 'git://github.com/astroumd/admit'
admitintegname = 'ADMIT-git-integ'
admitlineidname = 'ADMIT-lineid'
builddisk    = '/chara/carmaweb'
buildmachine = 'chara.astro.umd.edu'
# build with unit tests but no integration tests
buildlocation ='%s/buildbot/slaves/%s/%s/build' % (builddisk, buildmachine, admitgit)
# build with unit tests and integration tests
integrationbuildlocation='%s/buildbot/slaves/%s/%s/build' % (builddisk, buildmachine, admitintegname)
# build for lineid testing.
lineidbuildlocation='%s/buildbot/slaves/%s/%s/build' % (builddisk, buildmachine, admitlineidname)
lineidenv = lineidbuildlocation + '/bin'


# limit to two concurrent builds on the slave, use
c['slaves'] = [
               BuildSlave(buildmachine, "SBMN5I15HfwJ4", max_builds=2),
]

# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)

c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes. Any class which implements IChangeSource can be
# put here: there are several in buildbot/changes/*.py to choose from.

# Git poller with 5 minute interval
from buildbot.plugins import changes
c['change_source'] = changes.GitPoller(repourl=admitgitrepo, branches=['master'], pollInterval=5*60)

#from buildbot.changes.pb import PBChangeSource
#c['change_source'] = PBChangeSource()
#c['www'] = dict(change_hook_dialects={'github': { }})



####### SCHEDULERS

## configure the Schedulers

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.scheduler import Periodic
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.changes import filter

fastBuilds = [admitgit]
slowBuilds = [admitintegname]
dayBuilds = [admitlineidname]

c['schedulers'] = []

# make these a few minutes off exactly half-hour/hour so builds don't fire 
# all at the same time
c['schedulers'].append(Periodic(name='half-hourly', branch=None,
                                periodicBuildTimer=35*60,
                                builderNames=fastBuilds))

c['schedulers'].append(Periodic(name='hourly', branch=None,
                                periodicBuildTimer=62*60,
                                builderNames=slowBuilds))

c['schedulers'].append(Periodic(name='daily', branch=None,
                                periodicBuildTimer=24*60*60,
                                builderNames=dayBuilds))

c['schedulers'].append(ForceScheduler(name="forcefast", builderNames=fastBuilds))
c['schedulers'].append(ForceScheduler(name="forceslow", builderNames=slowBuilds))
c['schedulers'].append(ForceScheduler(name="forceday", builderNames=dayBuilds))

# build within 5 minutes of a checkin -- still not working right!
#c['schedulers'].append(SingleBranchScheduler(name='ADMIT checkins', 
#                 change_filter=filter.ChangeFilter(repository='/home/cvsroot/admit',branch=None),
#                 treeStableTimer=5*60,
#                 builderNames=fastBuilds))

####### BUILDERS

# the 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this builder
#  slavename (required): which slave to use (must appear in c['slaves'])
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/steps/source.py for
# CVS, SVN, and others.

from buildbot.process import factory
from buildbot.plugins import util, steps
from buildbot.process.properties import WithProperties
from buildbot.steps.python_twisted import Trial

# ADMIT environment
admitenv={'PYTHONPATH':[
'/chara/carmaweb/buildbot/slaves/chara.astro.umd.edu/admit',
'/n/astromake/opt/casa/buildbot/lib/python', 
'/n/astromake/opt/casa/buildbot/lib/python', 
'/n/astromake/opt/casa/buildbot/lib/python/heuristics', 
'/n/astromake/opt/casa/buildbot/lib/python/site-packages', 
'/n/astromake/opt/casa/buildbot/lib/python27.zip', 
'/n/astromake/opt/casa/buildbot/lib/python/plat-linux2', 
'/n/astromake/opt/casa/buildbot/lib/python/lib-tk', 
'/n/astromake/opt/casa/buildbot/lib/python/lib-old', 
'/n/astromake/opt/casa/buildbot/lib/python/lib-dynload', 
'/n/astromake/opt/casa/buildbot/lib/python/site-packages/IPython/Extensions'
],
'LD_LIBRARY_PATH':['/n/astromake/opt/casa/buildbot/lib'],
'PATH':['/n/astromake/opt/casa/buildbot/lib/casa/bin/', 
'/n/astromake/opt/casa/buildbot/bin', '/bin','/usr/bin','/local/bin','/usr/local/bin','/chara/carmaweb/bin',lineidenv],
'CASAPATH':['/n/astromake/opt/casa/buildbot linux socorro chara.astro.umd.edu'],
'CASA_ROOT':['/n/astromake/opt/casa/buildbot'],
'CASAROOT':['/n/astromake/opt/casa/buildbot'],
'TCL_LIBRARY':['/n/astromake/opt/casa/buildbot/share/tcl'],
'TK_LIBRARY':['/n/astromake/opt/casa/buildbot/share/tk'],
'MATPLOTLIBRC':['/chara/carmaweb/matplotlib'],
'MPLBACKEND':['module://Agg']
}

# the actual build procedure
#################################
# ADMIT short build
#################################
f1 = factory.BuildFactory()

# setup some properties for the build
f1.addStep(steps.SetPropertyFromCommand(property="processors", command=['getconf', '_NPROCESSORS_ONLN']))

f1.addStep(steps.ShellCommand(command=['rm', '-rf', buildlocation],description="rm build",name="rm build"))
# shouldn't need the -p
f1.addStep(steps.ShellCommand(command=['mkdir', '-p', buildlocation],description="mkdir build",name="mkdir build"))
#f1.addStep(steps.CVS(cvsroot='/chara/cvsroot/', cvsmodule='admit',  mode="clobber"))
f1.addStep(steps.CVS(cvsroot='/chara/cvsroot/', cvsmodule='admit'))
# build configure.ac 
f1.addStep(steps.ShellCommand(command=['autoconf'], name="autoconf", description="autoconf"))
f1.addStep(steps.Configure(command=["./configure", '--with-casa-root=/n/astromake/opt/casa/buildbot','--with-testdata=/n/chara/admit/testdata'],env=admitenv))
f1.addStep(steps.Test(command=['make', WithProperties("-j%(processors)s"), 'unit'],env=admitenv,description="Unit Test"))
f1.addStep(steps.Compile(command=['make', WithProperties("-j%(processors)s"), 'docs'], name="Make documentation", description="Create HTML documentation",env=admitenv))

sphinxloc = '%s/doc/sphinx/_build/html/' % buildlocation 
f1.addStep(steps.ShellCommand(command=['rsync','-a', sphinxloc, '/chara/bimawww/docs/admit'],  name="CopyHTMLdocumentation", description="Copy HTML documentation"))
f1.addStep(steps.ShellCommand(command=['chmod','-R', '777', '/chara/bimawww/docs/admit'], description="chmod HTML Documentation"))

b1 = {'name': admitname,
      'slavename': buildmachine,
      'builddir': admitname,
      'factory': f1,
}

############################################
# ADMIT long build (with integration tests)
############################################
f2 = factory.BuildFactory()

# setup some properties for the build
f2.addStep(steps.SetPropertyFromCommand(property="processors", command=['getconf', '_NPROCESSORS_ONLN']))

f2.addStep(steps.ShellCommand(command=['rm', '-rf', integrationbuildlocation],description="rm build",name="rm build"))
# shouldn't need the -p
f2.addStep(steps.ShellCommand(command=['mkdir', '-p', integrationbuildlocation],description="mkdir build",name="mkdir build"))
f2.addStep(steps.Git(repourl=admitgitrepo, mode='full', method='clobber'))
# build configure.ac 
f2.addStep(steps.ShellCommand(command=['autoconf'], name="autoconf", description="autoconf"))
f2.addStep(steps.Configure(command=["./configure", '--with-casa-root=/n/astromake/opt/casa/buildbot','--with-testdata=/n/chara/admit/testdata'],env=admitenv))
f2.addStep(steps.Test(command=['make', WithProperties("-j%(processors)s"), 'unit'],env=admitenv,description="Unit Test"))
f2.addStep(steps.Test(command=['make', WithProperties("-j%(processors)s"), 'integration'],env=admitenv,description="Integration Test"))
f2.addStep(steps.Test(command=['make', WithProperties("-j%(processors)s"), 'regression'],env=admitenv,description="Regression Test"))

b2 = {'name': admitintegname,
      'slavename': buildmachine,
      'builddir': admitintegname,
      'factory': f2,
}

#########################################################
# ADMIT  daily build (lineid test, no integration  tests)
#########################################################
f3 = factory.BuildFactory()

# setup some properties for the build
f3.addStep(steps.SetPropertyFromCommand(property="processors", command=['getconf', '_NPROCESSORS_ONLN']))

f3.addStep(steps.ShellCommand(command=['mkdir', '-p', lineidbuildlocation],description="mkdir build",name="mkdir build"))
f3.addStep(steps.Git(repourl=admitgitrepo, mode='full', method='clobber'))
# build configure.ac 
f3.addStep(steps.ShellCommand(command=['autoconf'], name="autoconf", description="autoconf"))
f3.addStep(steps.Configure(command=["./configure", '--with-casa-root=/n/astromake/opt/casa/buildbot'],env=admitenv))
f3.addStep(steps.Test(command=['make', WithProperties("-j%(processors)s"), 'linetest'],env=admitenv,description="LineID Test"))
f3.addStep(steps.ShellCommand(command=['chmod','-R', '777', '/chara/bimawww/docs/admitdata/'], description="chmod data directory"))

b3 = {'name': admitlineidname,
      'slavename': buildmachine,
      'builddir': admitlineidname,
      'factory': f3,
}


#################################
# ADMIT git build
#################################
f4 = factory.BuildFactory()

# setup some properties for the build
f4.addStep(steps.SetPropertyFromCommand(property="processors", command=['getconf', '_NPROCESSORS_ONLN']))

f4.addStep(steps.ShellCommand(command=['rm', '-rf', buildlocation],description="rm build",name="rm build"))
# shouldn't need the -p
f4.addStep(steps.ShellCommand(command=['mkdir', '-p', buildlocation],description="mkdir build",name="mkdir build"))
f4.addStep(steps.Git(repourl=admitgitrepo, mode='incremental'))
# build configure.ac 
f4.addStep(steps.ShellCommand(command=['autoconf'], name="autoconf", description="autoconf"))
f4.addStep(steps.Configure(command=["./configure", '--with-casa-root=/n/astromake/opt/casa/buildbot','--with-testdata=/n/chara/admit/testdata'],env=admitenv))
f4.addStep(steps.Test(command=['make', WithProperties("-j%(processors)s"), 'unit'],env=admitenv,description="Unit Test"))
f4.addStep(steps.Compile(command=['make', WithProperties("-j%(processors)s"), 'docs'], name="Make documentation", description="Create HTML documentation",env=admitenv))

sphinxloc = '%s/doc/sphinx/_build/html/' % buildlocation 
f4.addStep(steps.ShellCommand(command=['rsync','-a', sphinxloc, '/chara/bimawww/docs/admit'],  name="CopyHTMLdocumentation", description="Copy HTML documentation"))
f4.addStep(steps.ShellCommand(command=['chmod','-R', '777', '/chara/bimawww/docs/admit'], description="chmod HTML Documentation"))

b4 = {'name': admitgit,
      'slavename': buildmachine,
      'builddir': admitgit,
      'factory': f4,
}


c['builders'] = [b2, b3, b4]

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import auth, authz
authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    gracefulShutdown = False,
    forceBuild = True,
    forceAllBuilds = True,
    pingBuilder = True,
    stopBuild = True,
    stopAllBuilds = True,
    cancelPendingBuild = True,
)


# uncomment this to make the web service available to the world
# on port 8010
# port_spec="8010"

# limit the web service to this machine only
port_spec="tcp:8010:interface=127.0.0.1"

c['status'].append(html.WebStatus(http_port=port_spec, authz=authz_cfg))

# for github pushes
c['status'].append(html.WebStatus(allowForce=True,change_hook_dialects={ 'github' : True }))

# from buildbot.status import mail
# c['status'].append(mail.MailNotifier(fromaddr="buildbot@localhost",
#                                      extraRecipients=["builds@example.com"],
#                                      sendToInterestedUsers=False))
#
# from buildbot.status import words
# c['status'].append(words.IRC(host="irc.example.com", nick="bb",
#                              channels=["#example"]))
# c['status'].append(words.IRC(host="irc.example.com", nick="bb",
#                              channels=["#example"], useSSL=True))
#
# from buildbot.status import client
# c['status'].append(client.PBListener(9988))

#cvsName = WithProperties("%(slavename)s %(architecture)s Linux-%(kernelversion)s gcc-%(gccversion)s")

#recipients = ['tinderbox_builds@mmarray.org']
# recipients.append('iws@ovro.caltech.edu')
#from buildbot.status import tinderbox
#c['status'].append(tinderbox.TinderboxMailNotifier(fromaddr="buildbot@localhost", tree="carma",
#                                                   extraRecipients=recipients,
#                                                   relayhost="mail.ovro.caltech.edu",
#                                                   columnName=cvsName))


####### DEBUGGING OPTIONS

# if you set 'debugPassword', then you can connect to the buildmaster with
# the diagnostic tool in contrib/debugclient.py . From this tool, you can
# manually force builds and inject changes, which may be useful for testing
# your buildmaster without actually committing changes to your repository (or
# before you have a functioning 'sources' set up). The debug tool uses the
# same port number as the slaves do: 'slavePortnum'.

#c['debugPassword'] = "debugpassword"

# if you set 'manhole', you can ssh into the buildmaster and get an
# interactive python shell, which may be useful for debugging buildbot
# internals. It is probably only useful for buildbot developers. You can also
# use an authorized_keys file, or plain telnet.
#from buildbot import manhole
#c['manhole'] = manhole.PasswordManhole("tcp:9999:interface=127.0.0.1",
#                                       "admin", "password")


####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = "ALMA Data Mining Toolkit"
c['projectURL'] = "http://admit.astro.umd.edu/admit"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8010/"

# Data lifetime
#
# changeHorizon: the number of changes kept (CVS checkins, for example)
# buildBorizon: the number of build statuses to keep
# eventHorizon: the number of events to keep (slave disconnects, etc)
# logHorizon: the number of log files to keep
# buildCacheSize: the number of builds cached in memory
c['changeHorizon'] = 500
c['buildHorizon'] = 200
c['eventHorizon'] = 100
c['logHorizon'] = 100
c['buildCacheSize'] = 200
# the following hash key is undefined 
#c['changeCacheSize'] = 1000
